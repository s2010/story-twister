"""Add admin models and seed admin user

Revision ID: cea1e6a1fb32
Revises: c2dd74d42738
Create Date: 2025-08-08 08:42:48.520208

"""
from alembic import op
import sqlalchemy as sa
import os
import hashlib
import uuid
from datetime import datetime
from passlib.context import CryptContext


# revision identifiers, used by Alembic.
revision = 'cea1e6a1fb32'
down_revision = 'c2dd74d42738'
branch_labels = None
depends_on = None


def seed_admin_user_and_token():
    """Seed admin user and API token from environment variables"""
    # Get environment variables with defaults
    admin_username = os.getenv('ADMIN_SEED_USERNAME', 'admin')
    admin_email = os.getenv('ADMIN_SEED_EMAIL', 'admin@example.com')
    admin_password = os.getenv('ADMIN_SEED_PASSWORD', 'ChangeMe123!')
    admin_token = os.getenv('ADMIN_SEED_API_TOKEN', 'dev-admin-token')
    
    # Initialize password hasher
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    password_hash = pwd_context.hash(admin_password)
    
    # Hash the API token
    token_hash = hashlib.sha256(admin_token.encode()).hexdigest()
    
    # Get database connection
    connection = op.get_bind()
    
    # Generate UUIDs
    user_id = str(uuid.uuid4())
    token_id = str(uuid.uuid4())
    now = datetime.utcnow()
    
    # Upsert admin user
    connection.execute(sa.text("""
        INSERT INTO users (id, username, email, password_hash, role, is_active, is_system_user, created_at)
        VALUES (:id, :username, :email, :password_hash, 'admin', true, true, :created_at)
        ON CONFLICT (username) DO UPDATE SET
            email = EXCLUDED.email,
            password_hash = EXCLUDED.password_hash,
            role = 'admin',
            is_active = true,
            is_system_user = true
    """), {
        'id': user_id,
        'username': admin_username,
        'email': admin_email,
        'password_hash': password_hash,
        'created_at': now
    })
    
    # Get the user ID (in case of conflict)
    result = connection.execute(sa.text("""
        SELECT id FROM users WHERE username = :username
    """), {'username': admin_username})
    actual_user_id = result.fetchone()[0]
    
    # Upsert API token
    connection.execute(sa.text("""
        INSERT INTO api_tokens (id, user_id, token_hash, name, is_active, created_at)
        VALUES (:id, :user_id, :token_hash, 'Seeded Admin Token', true, :created_at)
        ON CONFLICT (token_hash) DO UPDATE SET
            user_id = EXCLUDED.user_id,
            name = 'Seeded Admin Token',
            is_active = true
    """), {
        'id': token_id,
        'user_id': actual_user_id,
        'token_hash': token_hash,
        'created_at': now
    })


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_system_user', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('admin_actions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('token_hash', sa.String(length=255), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('team_code', sa.String(length=50), nullable=True),
    sa.Column('payload_json', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_admin_actions_action', 'admin_actions', ['action'], unique=False)
    op.create_index('idx_admin_actions_created_at', 'admin_actions', ['created_at'], unique=False)
    op.create_index('idx_admin_actions_team_code', 'admin_actions', ['team_code'], unique=False)
    op.create_table('api_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_tokens_token_hash'), 'api_tokens', ['token_hash'], unique=True)
    # ### end Alembic commands ###
    
    # Seed admin user and token
    seed_admin_user_and_token()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_api_tokens_token_hash'), table_name='api_tokens')
    op.drop_table('api_tokens')
    op.drop_index('idx_admin_actions_team_code', table_name='admin_actions')
    op.drop_index('idx_admin_actions_created_at', table_name='admin_actions')
    op.drop_index('idx_admin_actions_action', table_name='admin_actions')
    op.drop_table('admin_actions')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
